DESCRIPTION:
When writing the executable, the following features of the C ++ language were used:

Lines 5-18 declare the Abstract class, which contains virtual functions, the definition of which will be overloaded in derived classes.
In addition, the class Abstract declaratively declares a constructor. The class destructor is declared virtual, since the class contains virtual functions, which defines
The need to use only a virtual destructor (in contrast to the simple destructor provided by the compiler by default).
In the class description, the CreateArr (int) method is declared, the definition of which is in lines 48-72. 
This method takes integer values and fills an array
at the user's choice (randomly or manually).

In addition, the inline method Get_sort_result () (inline method) of the Abstract class is located in line 10 
(definition of the inline method, in contrast to the usual function without
the keyword inline is inserted directly into the place of its call. In this case, the inline keyword should be used because 
of the content
definition of the method of just one expression, which does not greatly affect the decrease in the productivity of the entire program.)
This function returns the value
a member of the sort_result member that has a protected access specifier that provides access to a variable to only the methods 
of the base and derived classes.

In line 11, the empty virtual function void SortArr () is declared and defined. This function is not declared purely virtual 
(virtual void SortArr () = 0 in connection with
in that when the program is executed, an object of the Abstract class is created, which is not permissible for purely virtual 
classes that contain one or more purely virtual
functions. This virtual function is overloaded in the derived classes Bubble (117-161), Insert (163-195), Selection (197-231), 
Shaker (233-289).
The essence of overloading this function is the call of different methods for sorting the elements of the array through pointers 
to the object of the corresponding derived class (polymorphism).

In line 12 of the definition of public methods of the Abstract class, there is a definition of the void FindArr (int, int) method, 
whose definition is located on lines 74-109.
This method takes the value of the search method and the integer value as arguments to search for matches on the elements 
of the arr [] array.

Line 13 shows the declaration of the void DisplayTheValues () function, which displays the value of the array elements on the screen. 
The definition of this method is in lines
111-115.

Lines 15-17 specify the data members of the Abstract class that are available for use by the base and derived class methods
(heritage principle), but are not available
for other program methods (encapsulation). It is worth paying attention to the array-member int arr [10], in the declaration 
of which the keyword static was used, that
It allows to use it not separately for each object of the base or derived class, but in general all objects of the base
and derived classes
one specific static array member of the class. The definition of a static array member of the Abstract class is specified in line 291.

Lines 20-46 contain declarations of derived classes Bubble {}; Insert {}; selection {}; Shaker {}, 
which contain the declaration of the overloaded SortArr () method,
as well as the constructor and destructor.

In line 294, the main function of the program is executed.
In line 298 there is a definition of pointers to values of type bool from the dynamic memory area of the computer. 
Using pointers to values of type bool in the heap
is dictated by purely practical goals of gaining the skills of using computer's dynamic memory when writing programs in C ++.
Subsequent release
dynamic memory and zeroing addresses of pointers pointing to the memory participant's data before the end 
of the program in lines 402-409.
Although at the end of the program execution, the dynamic memory areas will be automatically released, but self-release
of memory in the heap is
a good programming tone and beyond that, it anticipates the occurrence of possible errors in the subsequent development of the program.

In line 300 of main, a pointer is created to an object of class Abstract, which is assigned a memory address 
in the heap allocated to store the value of the specified
type of data.

In lines 301-307, a choice is made of how to fill the array. So, in line 240, the Abstract :: CreateArr (int) method is called, 
the argument of which determines
subsequent execution of the method body. Access to the specified method of an object of the Abstract class is done through a pointer
to the object created and defined
in line 300.

In line 309, the value of the elements of the static array of the Abstract class is output after the latter is filled 
in by the Abstract :: CreateArr (int) method in line 305.

Lines 311-312 release memory on the heap and reset the address of the pointer in connection with the absence 
of the subsequent need to use
given heap resources.

In lines 314-399, you select the type of action to be performed. Just note that in view of the poor architecture of the program
in line 391 was used
the goto keyword to return to the previous menu (line 299).

In addition, lines 322-358 create a pointer to an object of the appropriate data type (Bubble, Insert, Selection, Shaker) and
the subsequent call through the pointer of the corresponding type of the overloaded function SortArt () (329, 334, 339, 344). 
So, when you call an overloaded method through a pointer
of the corresponding derived type, the virtual function table of the v-table compiler determines the type of value stored 
at the specified pointer to rpointer address
(264? 269? 274) and causes the corresponding overloaded member function.

In lines 372-387, a number is selected for searching (374), sorting type (383), and then passing arguments 
to the FindArr method (line 377).
In the definition of the function Abstract :: FindArr (int, int), 
the subsequent algorithm of the function for searching and displaying the desired value (74-109) is indicated.


In line 391, the goto statement was used to return to line 299. (because of poorly designed program architecture).
